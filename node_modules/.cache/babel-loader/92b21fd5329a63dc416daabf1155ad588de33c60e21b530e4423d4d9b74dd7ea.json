{"ast":null,"code":"var _jsxFileName = \"D:\\\\3D-WebXR-Furniture\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./1.glb\", \"./2.glb\", \"./3.glb\", \"./4.glb\", \"./5.glb\", \"./6.glb\", \"./7.glb\", \"./8.glb\", \"./9.glb\", \"./10.glb\", \"./11.glb\", \"./12.glb\", \"./13.glb\", \"./14.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let controller;\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    // Don't add the XREstimatedLight to the scene initially\n    // It doesn't have any estimated lighting values until an AR session starts\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      // Swap the default light out for the estimated one so we start getting some estimated values.\n      scene.add(xrLight);\n      scene.remove(light);\n      // The estimated lighting also provides an env cubemap which we apply here\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      // Swap the lights back when we stop receiving estimated values\n      scene.add(light);\n      scene.remove(xrLight);\n\n      // Revert back to the default environment\n      // scene.environment =\n    });\n\n    // Start the AR session directly\n    navigator.xr.requestSession(\"immersive-ar\", {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"]\n    }).then(session => {\n      renderer.xr.setSession(session);\n      session.addEventListener(\"end\", () => {\n        hitTestSourceRequested = false;\n        hitTestSource = null;\n      });\n    }).catch(err => {\n      console.error('Failed to start AR session:', err);\n    });\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n    }\n  }\n  const onClicked = (e, selectItem, index) => {\n    itemSelectedIndex = index;\n\n    // remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n    // set image to selected\n    e.target.classList.add(\"clicked\");\n  };\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          reticle.visible = true;\n          reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","controller","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","navigator","requestSession","requiredFeatures","optionalFeatures","then","session","setSession","catch","err","console","error","i","length","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","newModel","clone","matrix","decompose","quaternion","scale","scaleFactor","onClicked","e","selectItem","index","el","querySelector","classList","target","preventDefault","stopPropagation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","getSession","requestReferenceSpace","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","fromArray","getPose","transform","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/3D-WebXR-Furniture/src/App.js"],"sourcesContent":["import \"./App.css\";\r\nimport * as THREE from \"three\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\r\n\r\nfunction App() {\r\n  let reticle;\r\n  let hitTestSource = null;\r\n  let hitTestSourceRequested = false;\r\n\r\n  let scene, camera, renderer;\r\n\r\n  let models = [\r\n    \"./1.glb\",\r\n    \"./2.glb\",\r\n    \"./3.glb\",\r\n    \"./4.glb\",\r\n    \"./5.glb\",\r\n    \"./6.glb\",\r\n    \"./7.glb\",\r\n    \"./8.glb\",\r\n    \"./9.glb\",\r\n    \"./10.glb\",\r\n    \"./11.glb\",\r\n    \"./12.glb\",\r\n    \"./13.glb\",\r\n    \"./14.glb\",\r\n  ];\r\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\r\n  let items = [];\r\n  let itemSelectedIndex = 0;\r\n\r\n  let controller;\r\n\r\n  init();\r\n  setupFurnitureSelection();\r\n  animate();\r\n\r\n  function init() {\r\n    let myCanvas = document.getElementById(\"canvas\");\r\n    scene = new THREE.Scene();\r\n    camera = new THREE.PerspectiveCamera(\r\n      70,\r\n      myCanvas.innerWidth / myCanvas.innerHeight,\r\n      0.01,\r\n      20\r\n    );\r\n\r\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\r\n    light.position.set(0.5, 1, 0.25);\r\n    scene.add(light);\r\n\r\n    renderer = new THREE.WebGLRenderer({\r\n      canvas: myCanvas,\r\n      antialias: true,\r\n      alpha: true,\r\n    });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\r\n    renderer.xr.enabled = true;\r\n\r\n    // Don't add the XREstimatedLight to the scene initially\r\n    // It doesn't have any estimated lighting values until an AR session starts\r\n    const xrLight = new XREstimatedLight(renderer);\r\n    xrLight.addEventListener(\"estimationstart\", () => {\r\n      // Swap the default light out for the estimated one so we start getting some estimated values.\r\n      scene.add(xrLight);\r\n      scene.remove(light);\r\n      // The estimated lighting also provides an env cubemap which we apply here\r\n      if (xrLight.environment) {\r\n        scene.environment = xrLight.environment;\r\n      }\r\n    });\r\n\r\n    xrLight.addEventListener(\"estimationend\", () => {\r\n      // Swap the lights back when we stop receiving estimated values\r\n      scene.add(light);\r\n      scene.remove(xrLight);\r\n\r\n      // Revert back to the default environment\r\n      // scene.environment =\r\n    });\r\n\r\n    // Start the AR session directly\r\n    navigator.xr.requestSession(\"immersive-ar\", {\r\n      requiredFeatures: [\"hit-test\"],\r\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\r\n    }).then(session => {\r\n      renderer.xr.setSession(session);\r\n      session.addEventListener(\"end\", () => {\r\n        hitTestSourceRequested = false;\r\n        hitTestSource = null;\r\n      });\r\n    }).catch(err => {\r\n      console.error('Failed to start AR session:', err);\r\n    });\r\n\r\n    for (let i = 0; i < models.length; i++) {\r\n      const loader = new GLTFLoader();\r\n      loader.load(models[i], function (glb) {\r\n        let model = glb.scene;\r\n        items[i] = model;\r\n      });\r\n    }\r\n\r\n    controller = renderer.xr.getController(0);\r\n    controller.addEventListener(\"select\", onSelect);\r\n    scene.add(controller);\r\n\r\n    reticle = new THREE.Mesh(\r\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\r\n      new THREE.MeshBasicMaterial()\r\n    );\r\n    reticle.matrixAutoUpdate = false;\r\n    reticle.visible = false;\r\n    scene.add(reticle);\r\n  }\r\n\r\n  function onSelect() {\r\n    if (reticle.visible) {\r\n      let newModel = items[itemSelectedIndex].clone();\r\n      newModel.visible = true;\r\n      reticle.matrix.decompose(\r\n        newModel.position,\r\n        newModel.quaternion,\r\n        newModel.scale\r\n      );\r\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\r\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\r\n\r\n      scene.add(newModel);\r\n    }\r\n  }\r\n\r\n  const onClicked = (e, selectItem, index) => {\r\n    itemSelectedIndex = index;\r\n\r\n    // remove image selection from others to indicate unclicked\r\n    for (let i = 0; i < models.length; i++) {\r\n      const el = document.querySelector(`#item` + i);\r\n      el.classList.remove(\"clicked\");\r\n    }\r\n    // set image to selected\r\n    e.target.classList.add(\"clicked\");\r\n  };\r\n\r\n  function setupFurnitureSelection() {\r\n    for (let i = 0; i < models.length; i++) {\r\n      const el = document.querySelector(`#item` + i);\r\n      el.addEventListener(\"beforexrselect\", (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      });\r\n      el.addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        onClicked(e, items[i], i);\r\n      });\r\n    }\r\n  }\r\n\r\n  function animate() {\r\n    renderer.setAnimationLoop(render);\r\n  }\r\n\r\n  function render(timestamp, frame) {\r\n    if (frame) {\r\n      const referenceSpace = renderer.xr.getReferenceSpace();\r\n      const session = renderer.xr.getSession();\r\n\r\n      if (hitTestSourceRequested === false) {\r\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\r\n          session\r\n            .requestHitTestSource({ space: referenceSpace })\r\n            .then(function (source) {\r\n              hitTestSource = source;\r\n            });\r\n        });\r\n\r\n        hitTestSourceRequested = true;\r\n      }\r\n\r\n      if (hitTestSource) {\r\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\r\n\r\n        if (hitTestResults.length) {\r\n          const hit = hitTestResults[0];\r\n\r\n          reticle.visible = true;\r\n          reticle.matrix.fromArray(\r\n            hit.getPose(referenceSpace).transform.matrix\r\n          );\r\n        } else {\r\n          reticle.visible = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    renderer.render(scene, camera);\r\n  }\r\n\r\n  return <div className=\"App\"></div>;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}